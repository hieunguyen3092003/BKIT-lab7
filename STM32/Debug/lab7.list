
lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004800  08004800  00005800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004818  08004818  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004820  08004820  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00005820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004828  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          0000020c  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001624b  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003706  00000000  00000000  0001c28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0001f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101d  00000000  00000000  00020e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bbd  00000000  00000000  00021e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a770  00000000  00000000  00045a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d34f0  00000000  00000000  00060182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133672  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005628  00000000  00000000  001336b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00138ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047e8 	.word	0x080047e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080047e8 	.word	0x080047e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <initButton>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void initButton() {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <initButton+0x14>)
 80004c2:	f001 fc37 	bl	8001d34 <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	@ 0x38
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	615a      	str	r2, [r3, #20]
 80004fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004fc:	4b2f      	ldr	r3, [pc, #188]	@ (80005bc <MX_FSMC_Init+0xec>)
 80004fe:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000502:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000504:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000506:	4a2e      	ldr	r2, [pc, #184]	@ (80005c0 <MX_FSMC_Init+0xf0>)
 8000508:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800050a:	4b2c      	ldr	r3, [pc, #176]	@ (80005bc <MX_FSMC_Init+0xec>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_FSMC_Init+0xec>)
 800051e:	2210      	movs	r2, #16
 8000520:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000522:	4b26      	ldr	r3, [pc, #152]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000528:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_FSMC_Init+0xec>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800052e:	4b23      	ldr	r3, [pc, #140]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000534:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800053a:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_FSMC_Init+0xec>)
 800053c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000542:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000548:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <MX_FSMC_Init+0xec>)
 800054a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800054e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000550:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_FSMC_Init+0xec>)
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800055c:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_FSMC_Init+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000562:	230f      	movs	r3, #15
 8000564:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000566:	230f      	movs	r3, #15
 8000568:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800056a:	233c      	movs	r3, #60	@ 0x3c
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000572:	2310      	movs	r3, #16
 8000574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000576:	2311      	movs	r3, #17
 8000578:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800057a:	2300      	movs	r3, #0
 800057c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000586:	2309      	movs	r3, #9
 8000588:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800058e:	2310      	movs	r3, #16
 8000590:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000592:	2311      	movs	r3, #17
 8000594:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800059a:	463a      	mov	r2, r7
 800059c:	f107 031c 	add.w	r3, r7, #28
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_FSMC_Init+0xec>)
 80005a4:	f002 fc40 	bl	8002e28 <HAL_SRAM_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80005ae:	f000 fcb1 	bl	8000f14 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005b2:	bf00      	nop
 80005b4:	3738      	adds	r7, #56	@ 0x38
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000030 	.word	0x20000030
 80005c0:	a0000104 	.word	0xa0000104

080005c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <HAL_FSMC_MspInit+0x88>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d131      	bne.n	8000644 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <HAL_FSMC_MspInit+0x88>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005ee:	4a18      	ldr	r2, [pc, #96]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6393      	str	r3, [r2, #56]	@ 0x38
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <HAL_FSMC_MspInit+0x8c>)
 80005f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000602:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000606:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000614:	230c      	movs	r3, #12
 8000616:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <HAL_FSMC_MspInit+0x90>)
 800061e:	f001 f9ed 	bl	80019fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000622:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000626:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000634:	230c      	movs	r3, #12
 8000636:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4619      	mov	r1, r3
 800063c:	4806      	ldr	r0, [pc, #24]	@ (8000658 <HAL_FSMC_MspInit+0x94>)
 800063e:	f001 f9dd 	bl	80019fc <HAL_GPIO_Init>
 8000642:	e000      	b.n	8000646 <HAL_FSMC_MspInit+0x82>
    return;
 8000644:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000080 	.word	0x20000080
 8000650:	40023800 	.word	0x40023800
 8000654:	40021000 	.word	0x40021000
 8000658:	40020c00 	.word	0x40020c00

0800065c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000664:	f7ff ffae 	bl	80005c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	4b63      	ldr	r3, [pc, #396]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a62      	ldr	r2, [pc, #392]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b60      	ldr	r3, [pc, #384]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0310 	and.w	r3, r3, #16
 800069e:	61bb      	str	r3, [r7, #24]
 80006a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b59      	ldr	r3, [pc, #356]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	4b55      	ldr	r3, [pc, #340]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a54      	ldr	r2, [pc, #336]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b52      	ldr	r3, [pc, #328]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	4b4e      	ldr	r3, [pc, #312]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a4d      	ldr	r2, [pc, #308]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b47      	ldr	r3, [pc, #284]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a46      	ldr	r2, [pc, #280]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a3f      	ldr	r2, [pc, #252]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a38      	ldr	r2, [pc, #224]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b36      	ldr	r3, [pc, #216]	@ (8000818 <MX_GPIO_Init+0x1a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2170      	movs	r1, #112	@ 0x70
 800074e:	4833      	ldr	r0, [pc, #204]	@ (800081c <MX_GPIO_Init+0x1ac>)
 8000750:	f001 faf0 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075a:	4831      	ldr	r0, [pc, #196]	@ (8000820 <MX_GPIO_Init+0x1b0>)
 800075c:	f001 faea 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2140      	movs	r1, #64	@ 0x40
 8000764:	482f      	ldr	r0, [pc, #188]	@ (8000824 <MX_GPIO_Init+0x1b4>)
 8000766:	f001 fae5 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	482d      	ldr	r0, [pc, #180]	@ (8000828 <MX_GPIO_Init+0x1b8>)
 8000772:	f001 fadf 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	482c      	ldr	r0, [pc, #176]	@ (800082c <MX_GPIO_Init+0x1bc>)
 800077c:	f001 fada 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000780:	2370      	movs	r3, #112	@ 0x70
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	4821      	ldr	r0, [pc, #132]	@ (800081c <MX_GPIO_Init+0x1ac>)
 8000798:	f001 f930 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	481a      	ldr	r0, [pc, #104]	@ (8000820 <MX_GPIO_Init+0x1b0>)
 80007b6:	f001 f921 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80007ba:	2340      	movs	r3, #64	@ 0x40
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4814      	ldr	r0, [pc, #80]	@ (8000824 <MX_GPIO_Init+0x1b4>)
 80007d2:	f001 f913 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80007d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MX_GPIO_Init+0x1b8>)
 80007f0:	f001 f904 	bl	80019fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80007f4:	2308      	movs	r3, #8
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4808      	ldr	r0, [pc, #32]	@ (800082c <MX_GPIO_Init+0x1bc>)
 800080c:	f001 f8f6 	bl	80019fc <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	@ 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40021000 	.word	0x40021000
 8000820:	40020800 	.word	0x40020800
 8000824:	40021800 	.word	0x40021800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020c00 	.word	0x40020c00

08000830 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f001 fa95 	bl	8001d9c <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 fb4c 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000084 	.word	0x20000084
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	@ (8000910 <HAL_I2C_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ca:	23c0      	movs	r3, #192	@ 0xc0
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <HAL_I2C_MspInit+0x8c>)
 80008e6:	f001 f889 	bl	80019fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_I2C_MspInit+0x88>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	@ 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40005400 	.word	0x40005400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400

0800091c <LCD_WR_REG>:
static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8000926:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <LCD_WR_REG+0x1c>)
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	8013      	strh	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	600ffffe 	.word	0x600ffffe

0800093c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000946:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <LCD_WR_DATA+0x1c>)
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	8053      	strh	r3, [r2, #2]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	600ffffe 	.word	0x600ffffe

0800095c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <LCD_RD_DATA+0x20>)
 8000964:	885b      	ldrh	r3, [r3, #2]
 8000966:	b29b      	uxth	r3, r3
 8000968:	80fb      	strh	r3, [r7, #6]
	return ram;
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	b29b      	uxth	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	600ffffe 	.word	0x600ffffe

08000980 <lcdSetDirection>:
		}
	}
}

void lcdSetDirection(uint8_t dir)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	091b      	lsrs	r3, r3, #4
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d007      	beq.n	80009aa <lcdSetDirection+0x2a>
	{
		lcddev.width = 320;
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <lcdSetDirection+0x44>)
 800099c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009a0:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <lcdSetDirection+0x44>)
 80009a4:	22f0      	movs	r2, #240	@ 0xf0
 80009a6:	805a      	strh	r2, [r3, #2]
	else
	{
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 80009a8:	e006      	b.n	80009b8 <lcdSetDirection+0x38>
		lcddev.width = 240;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <lcdSetDirection+0x44>)
 80009ac:	22f0      	movs	r2, #240	@ 0xf0
 80009ae:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <lcdSetDirection+0x44>)
 80009b2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009b6:	805a      	strh	r2, [r3, #2]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	200000d8 	.word	0x200000d8

080009c8 <initLCD>:

void initLCD(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d2:	48aa      	ldr	r0, [pc, #680]	@ (8000c7c <initLCD+0x2b4>)
 80009d4:	f001 f9ae 	bl	8001d34 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009dc:	f000 fe46 	bl	800166c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e6:	48a5      	ldr	r0, [pc, #660]	@ (8000c7c <initLCD+0x2b4>)
 80009e8:	f001 f9a4 	bl	8001d34 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f0:	f000 fe3c 	bl	800166c <HAL_Delay>
	lcdSetDirection(DFT_SCAN_DIR);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff ffc3 	bl	8000980 <lcdSetDirection>
	LCD_WR_REG(0XD3);
 80009fa:	20d3      	movs	r0, #211	@ 0xd3
 80009fc:	f7ff ff8e 	bl	800091c <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000a00:	f7ff ffac 	bl	800095c <LCD_RD_DATA>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b9d      	ldr	r3, [pc, #628]	@ (8000c80 <initLCD+0x2b8>)
 8000a0a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000a0c:	f7ff ffa6 	bl	800095c <LCD_RD_DATA>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b9a      	ldr	r3, [pc, #616]	@ (8000c80 <initLCD+0x2b8>)
 8000a16:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000a18:	f7ff ffa0 	bl	800095c <LCD_RD_DATA>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b97      	ldr	r3, [pc, #604]	@ (8000c80 <initLCD+0x2b8>)
 8000a22:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000a24:	4b96      	ldr	r3, [pc, #600]	@ (8000c80 <initLCD+0x2b8>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b94      	ldr	r3, [pc, #592]	@ (8000c80 <initLCD+0x2b8>)
 8000a2e:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000a30:	f7ff ff94 	bl	800095c <LCD_RD_DATA>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b91      	ldr	r3, [pc, #580]	@ (8000c80 <initLCD+0x2b8>)
 8000a3a:	889b      	ldrh	r3, [r3, #4]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	4b8f      	ldr	r3, [pc, #572]	@ (8000c80 <initLCD+0x2b8>)
 8000a42:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000a44:	20cf      	movs	r0, #207	@ 0xcf
 8000a46:	f7ff ff69 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ff76 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000a50:	20c1      	movs	r0, #193	@ 0xc1
 8000a52:	f7ff ff73 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000a56:	2030      	movs	r0, #48	@ 0x30
 8000a58:	f7ff ff70 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000a5c:	20ed      	movs	r0, #237	@ 0xed
 8000a5e:	f7ff ff5d 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000a62:	2064      	movs	r0, #100	@ 0x64
 8000a64:	f7ff ff6a 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f7ff ff67 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000a6e:	2012      	movs	r0, #18
 8000a70:	f7ff ff64 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000a74:	2081      	movs	r0, #129	@ 0x81
 8000a76:	f7ff ff61 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000a7a:	20e8      	movs	r0, #232	@ 0xe8
 8000a7c:	f7ff ff4e 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000a80:	2085      	movs	r0, #133	@ 0x85
 8000a82:	f7ff ff5b 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000a86:	2010      	movs	r0, #16
 8000a88:	f7ff ff58 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000a8c:	207a      	movs	r0, #122	@ 0x7a
 8000a8e:	f7ff ff55 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000a92:	20cb      	movs	r0, #203	@ 0xcb
 8000a94:	f7ff ff42 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000a98:	2039      	movs	r0, #57	@ 0x39
 8000a9a:	f7ff ff4f 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000a9e:	202c      	movs	r0, #44	@ 0x2c
 8000aa0:	f7ff ff4c 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff ff49 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000aaa:	2034      	movs	r0, #52	@ 0x34
 8000aac:	f7ff ff46 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ab0:	2002      	movs	r0, #2
 8000ab2:	f7ff ff43 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ab6:	20f7      	movs	r0, #247	@ 0xf7
 8000ab8:	f7ff ff30 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000abc:	2020      	movs	r0, #32
 8000abe:	f7ff ff3d 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000ac2:	20ea      	movs	r0, #234	@ 0xea
 8000ac4:	f7ff ff2a 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff ff37 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ff34 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ad4:	20c0      	movs	r0, #192	@ 0xc0
 8000ad6:	f7ff ff21 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000ada:	201b      	movs	r0, #27
 8000adc:	f7ff ff2e 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000ae0:	20c1      	movs	r0, #193	@ 0xc1
 8000ae2:	f7ff ff1b 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff28 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000aec:	20c5      	movs	r0, #197	@ 0xc5
 8000aee:	f7ff ff15 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000af2:	2030      	movs	r0, #48	@ 0x30
 8000af4:	f7ff ff22 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000af8:	2030      	movs	r0, #48	@ 0x30
 8000afa:	f7ff ff1f 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000afe:	20c7      	movs	r0, #199	@ 0xc7
 8000b00:	f7ff ff0c 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000b04:	20b7      	movs	r0, #183	@ 0xb7
 8000b06:	f7ff ff19 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000b0a:	2036      	movs	r0, #54	@ 0x36
 8000b0c:	f7ff ff06 	bl	800091c <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8000b10:	2008      	movs	r0, #8
 8000b12:	f7ff ff13 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000b16:	203a      	movs	r0, #58	@ 0x3a
 8000b18:	f7ff ff00 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000b1c:	2055      	movs	r0, #85	@ 0x55
 8000b1e:	f7ff ff0d 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000b22:	20b1      	movs	r0, #177	@ 0xb1
 8000b24:	f7ff fefa 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff07 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000b2e:	201a      	movs	r0, #26
 8000b30:	f7ff ff04 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000b34:	20b6      	movs	r0, #182	@ 0xb6
 8000b36:	f7ff fef1 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f7ff fefe 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000b40:	20a2      	movs	r0, #162	@ 0xa2
 8000b42:	f7ff fefb 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000b46:	20f2      	movs	r0, #242	@ 0xf2
 8000b48:	f7ff fee8 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fef5 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000b52:	2026      	movs	r0, #38	@ 0x26
 8000b54:	f7ff fee2 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff feef 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000b5e:	20e0      	movs	r0, #224	@ 0xe0
 8000b60:	f7ff fedc 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000b64:	200f      	movs	r0, #15
 8000b66:	f7ff fee9 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000b6a:	202a      	movs	r0, #42	@ 0x2a
 8000b6c:	f7ff fee6 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000b70:	2028      	movs	r0, #40	@ 0x28
 8000b72:	f7ff fee3 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000b76:	2008      	movs	r0, #8
 8000b78:	f7ff fee0 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000b7c:	200e      	movs	r0, #14
 8000b7e:	f7ff fedd 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000b82:	2008      	movs	r0, #8
 8000b84:	f7ff feda 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000b88:	2054      	movs	r0, #84	@ 0x54
 8000b8a:	f7ff fed7 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000b8e:	20a9      	movs	r0, #169	@ 0xa9
 8000b90:	f7ff fed4 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000b94:	2043      	movs	r0, #67	@ 0x43
 8000b96:	f7ff fed1 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000b9a:	200a      	movs	r0, #10
 8000b9c:	f7ff fece 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ba0:	200f      	movs	r0, #15
 8000ba2:	f7ff fecb 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fec8 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fec5 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fec2 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff febf 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000bbe:	20e1      	movs	r0, #225	@ 0xe1
 8000bc0:	f7ff feac 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff feb9 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000bca:	2015      	movs	r0, #21
 8000bcc:	f7ff feb6 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000bd0:	2017      	movs	r0, #23
 8000bd2:	f7ff feb3 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000bd6:	2007      	movs	r0, #7
 8000bd8:	f7ff feb0 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000bdc:	2011      	movs	r0, #17
 8000bde:	f7ff fead 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000be2:	2006      	movs	r0, #6
 8000be4:	f7ff feaa 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000be8:	202b      	movs	r0, #43	@ 0x2b
 8000bea:	f7ff fea7 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000bee:	2056      	movs	r0, #86	@ 0x56
 8000bf0:	f7ff fea4 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000bf4:	203c      	movs	r0, #60	@ 0x3c
 8000bf6:	f7ff fea1 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f7ff fe9e 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000c00:	2010      	movs	r0, #16
 8000c02:	f7ff fe9b 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff fe98 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c0c:	203f      	movs	r0, #63	@ 0x3f
 8000c0e:	f7ff fe95 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000c12:	203f      	movs	r0, #63	@ 0x3f
 8000c14:	f7ff fe92 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000c18:	200f      	movs	r0, #15
 8000c1a:	f7ff fe8f 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000c1e:	202b      	movs	r0, #43	@ 0x2b
 8000c20:	f7ff fe7c 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fe89 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff fe86 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fe83 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000c36:	203f      	movs	r0, #63	@ 0x3f
 8000c38:	f7ff fe80 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000c3c:	202a      	movs	r0, #42	@ 0x2a
 8000c3e:	f7ff fe6d 	bl	800091c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fe7a 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fe77 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fe74 	bl	800093c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000c54:	20ef      	movs	r0, #239	@ 0xef
 8000c56:	f7ff fe71 	bl	800093c <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8000c5a:	2011      	movs	r0, #17
 8000c5c:	f7ff fe5e 	bl	800091c <LCD_WR_REG>
	HAL_Delay(120);
 8000c60:	2078      	movs	r0, #120	@ 0x78
 8000c62:	f000 fd03 	bl	800166c <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8000c66:	2029      	movs	r0, #41	@ 0x29
 8000c68:	f7ff fe58 	bl	800091c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <initLCD+0x2bc>)
 8000c74:	f001 f85e 	bl	8001d34 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	200000d8 	.word	0x200000d8
 8000c84:	40020000 	.word	0x40020000

08000c88 <initLed7Seg>:
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void initLed7Seg()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2140      	movs	r1, #64	@ 0x40
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <initLed7Seg+0x14>)
 8000c92:	f001 f84f 	bl	8001d34 <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40021800 	.word	0x40021800

08000ca0 <led7SegDisplay>:
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led7SegDisplay()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8000da4 <led7SegDisplay+0x104>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <led7SegDisplay+0x104>)
 8000cae:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <led7SegDisplay+0x108>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dac <led7SegDisplay+0x10c>)
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	4b39      	ldr	r3, [pc, #228]	@ (8000da4 <led7SegDisplay+0x104>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <led7SegDisplay+0x104>)
 8000ccc:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8000cce:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <led7SegDisplay+0x108>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d846      	bhi.n	8000d64 <led7SegDisplay+0xc4>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <led7SegDisplay+0x3c>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000d0b 	.word	0x08000d0b
 8000ce4:	08000d29 	.word	0x08000d29
 8000ce8:	08000d47 	.word	0x08000d47
	case 0:
		spi_buffer |= 0x00b0;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <led7SegDisplay+0x104>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <led7SegDisplay+0x104>)
 8000cf8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <led7SegDisplay+0x104>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d06:	801a      	strh	r2, [r3, #0]
		break;
 8000d08:	e02d      	b.n	8000d66 <led7SegDisplay+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000d0a:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b23      	ldr	r3, [pc, #140]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d16:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	f023 0320 	bic.w	r3, r3, #32
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d24:	801a      	strh	r2, [r3, #0]
		break;
 8000d26:	e01e      	b.n	8000d66 <led7SegDisplay+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d34:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000d36:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	f023 0310 	bic.w	r3, r3, #16
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d42:	801a      	strh	r2, [r3, #0]
		break;
 8000d44:	e00f      	b.n	8000d66 <led7SegDisplay+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d52:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d60:	801a      	strh	r2, [r3, #0]
		break;
 8000d62:	e000      	b.n	8000d66 <led7SegDisplay+0xc6>
	default:
		break;
 8000d64:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <led7SegDisplay+0x108>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	425a      	negs	r2, r3
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	f002 0203 	and.w	r2, r2, #3
 8000d76:	bf58      	it	pl
 8000d78:	4253      	negpl	r3, r2
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <led7SegDisplay+0x108>)
 8000d7e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2140      	movs	r1, #64	@ 0x40
 8000d84:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <led7SegDisplay+0x110>)
 8000d86:	f000 ffd5 	bl	8001d34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4905      	ldr	r1, [pc, #20]	@ (8000da4 <led7SegDisplay+0x104>)
 8000d90:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <led7SegDisplay+0x114>)
 8000d92:	f001 fe28 	bl	80029e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2140      	movs	r1, #64	@ 0x40
 8000d9a:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <led7SegDisplay+0x110>)
 8000d9c:	f000 ffca 	bl	8001d34 <HAL_GPIO_WritePin>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000004 	.word	0x20000004
 8000da8:	200000de 	.word	0x200000de
 8000dac:	20000000 	.word	0x20000000
 8000db0:	40021800 	.word	0x40021800
 8000db4:	200000ec 	.word	0x200000ec

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fbe4 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f824 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f7ff fc54 	bl	8000670 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dc8:	f000 fa5c 	bl	8001284 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000dcc:	f000 f954 	bl	8001078 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000dd0:	f7ff fb7e 	bl	80004d0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000dd4:	f7ff fd2c 	bl	8000830 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dd8:	f000 fb32 	bl	8001440 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000ddc:	f000 fa9e 	bl	800131c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  initSystem();
 8000de0:	f000 f88a 	bl	8000ef8 <initSystem>

  sTimer4Set(1000, 1000); // interrupt every 50ms
 8000de4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dec:	f000 f8ca 	bl	8000f84 <sTimer4Set>
  sTimer2Set(0, 500); // interrupt every 500ms
 8000df0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f8a7 	bl	8000f48 <sTimer2Set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(sTimer2GetFlag())
 8000dfa:	f000 f8e1 	bl	8000fc0 <sTimer2GetFlag>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0fa      	beq.n	8000dfa <main+0x42>
	  {
		  (void)debugSystem();
 8000e04:	f000 f86c 	bl	8000ee0 <debugSystem>
	  if(sTimer2GetFlag())
 8000e08:	e7f7      	b.n	8000dfa <main+0x42>
	...

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	@ 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fcb8 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b28      	ldr	r3, [pc, #160]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e80:	23a8      	movs	r3, #168	@ 0xa8
 8000e82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 f8c7 	bl	8002024 <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e9c:	f000 f83a 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000eb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fb28 	bl	8002514 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eca:	f000 f823 	bl	8000f14 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	@ 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <debugSystem>:

/* USER CODE BEGIN 4 */
uint8_t debugSystem()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	if(DEBUG_LED_Pin)
	{
		HAL_GPIO_TogglePin(GPIOE, DEBUG_LED_Pin);
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <debugSystem+0x14>)
 8000ee8:	f000 ff3d 	bl	8001d66 <HAL_GPIO_TogglePin>
		return 1;
 8000eec:	2301      	movs	r3, #1
	}
	return 0;
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <initSystem>:
void initSystem()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	initTimer2();
 8000efc:	f000 f810 	bl	8000f20 <initTimer2>
	initTimer4();
 8000f00:	f000 f818 	bl	8000f34 <initTimer4>
	initLed7Seg();
 8000f04:	f7ff fec0 	bl	8000c88 <initLed7Seg>
	initButton();
 8000f08:	f7ff fad6 	bl	80004b8 <initButton>
	initLCD();
 8000f0c:	f7ff fd5c 	bl	80009c8 <initLCD>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <initTimer2>:

/**
 * @brief	init timer function
 */
void initTimer2()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <initTimer2+0x10>)
 8000f26:	f002 f817 	bl	8002f58 <HAL_TIM_Base_Start_IT>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000144 	.word	0x20000144

08000f34 <initTimer4>:

void initTimer4()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <initTimer4+0x10>)
 8000f3a:	f002 f80d 	bl	8002f58 <HAL_TIM_Base_Start_IT>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000018c 	.word	0x2000018c

08000f48 <sTimer2Set>:
 * @brief	set timer duration(ms)
 * @param	delay(ms)
 * @param	period(ms)
 */
void sTimer2Set(uint16_t delay, uint16_t period)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	80fb      	strh	r3, [r7, #6]
 8000f54:	4613      	mov	r3, r2
 8000f56:	80bb      	strh	r3, [r7, #4]
	timer_2_mul = period / TIMER_2_CYCLES;
 8000f58:	4a07      	ldr	r2, [pc, #28]	@ (8000f78 <sTimer2Set+0x30>)
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	8013      	strh	r3, [r2, #0]
	timer_2_counter = delay / TIMER_2_CYCLES;
 8000f5e:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <sTimer2Set+0x34>)
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	8013      	strh	r3, [r2, #0]
	timer_2_flag = 0;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <sTimer2Set+0x38>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200000e4 	.word	0x200000e4
 8000f7c:	200000e2 	.word	0x200000e2
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <sTimer4Set>:

void sTimer4Set(uint16_t delay, uint16_t period)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	80fb      	strh	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	timer_4_mul = period / TIMER_4_CYCLES;
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <sTimer4Set+0x30>)
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	8013      	strh	r3, [r2, #0]
	timer_4_counter = delay / TIMER_4_CYCLES;
 8000f9a:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <sTimer4Set+0x34>)
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	8013      	strh	r3, [r2, #0]
	timer_4_flag = 0;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <sTimer4Set+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000ea 	.word	0x200000ea
 8000fb8:	200000e8 	.word	0x200000e8
 8000fbc:	200000e6 	.word	0x200000e6

08000fc0 <sTimer2GetFlag>:
/**
 * @brief	get flag timer fuction and auto reset flags and timer counter
 * @return	timer flag
 */
uint8_t sTimer2GetFlag()
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
	if(timer_2_flag)
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <sTimer2GetFlag+0x2c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <sTimer2GetFlag+0x1e>
	{
		timer_2_flag = 0;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <sTimer2GetFlag+0x2c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
		timer_2_counter = timer_2_mul;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <sTimer2GetFlag+0x30>)
 8000fd4:	881a      	ldrh	r2, [r3, #0]
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <sTimer2GetFlag+0x34>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <sTimer2GetFlag+0x20>
	}
	return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200000e0 	.word	0x200000e0
 8000ff0:	200000e4 	.word	0x200000e4
 8000ff4:	200000e2 	.word	0x200000e2

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
	return 0;
}
/**
 * @brief	callback function call every 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001008:	d110      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if (timer_2_counter > 0)
 800100a:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			--timer_2_counter;
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800101c:	801a      	strh	r2, [r3, #0]
		}
		if (timer_2_counter <= 0)
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			timer_2_flag = 1;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d112      	bne.n	800105c <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		if (timer_4_counter > 0)
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			--timer_4_counter;
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001048:	801a      	strh	r2, [r3, #0]
		}
		if (timer_4_counter <= 0)
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			timer_4_flag = 1;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
		}
		led7SegDisplay();
 8001058:	f7ff fe22 	bl	8000ca0 <led7SegDisplay>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000e2 	.word	0x200000e2
 8001068:	200000e0 	.word	0x200000e0
 800106c:	40000800 	.word	0x40000800
 8001070:	200000e8 	.word	0x200000e8
 8001074:	200000e6 	.word	0x200000e6

08001078 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_SPI1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	@ (80010e0 <MX_SPI1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_SPI1_Init+0x64>)
 80010ca:	f001 fc03 	bl	80028d4 <HAL_SPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f7ff ff1e 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000ec 	.word	0x200000ec
 80010e0:	40013000 	.word	0x40013000

080010e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <HAL_SPI_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12b      	bne.n	800115e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <HAL_SPI_MspInit+0x88>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	4a17      	ldr	r2, [pc, #92]	@ (800116c <HAL_SPI_MspInit+0x88>)
 8001110:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001114:	6453      	str	r3, [r2, #68]	@ 0x44
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <HAL_SPI_MspInit+0x88>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_SPI_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	@ (800116c <HAL_SPI_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_SPI_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800113e:	2338      	movs	r3, #56	@ 0x38
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114e:	2305      	movs	r3, #5
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <HAL_SPI_MspInit+0x8c>)
 800115a:	f000 fc4f 	bl	80019fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	@ 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40013000 	.word	0x40013000
 800116c:	40023800 	.word	0x40023800
 8001170:	40020400 	.word	0x40020400

08001174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 fa07 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <TIM2_IRQHandler+0x10>)
 800122a:	f001 ff05 	bl	8003038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000144 	.word	0x20000144

08001238 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <TIM4_IRQHandler+0x10>)
 800123e:	f001 fefb 	bl	8003038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000018c 	.word	0x2000018c

0800124c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USART1_IRQHandler+0x10>)
 8001252:	f002 faf7 	bl	8003844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001d4 	.word	0x200001d4

08001260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012aa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80012ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012b8:	2209      	movs	r2, #9
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4813      	ldr	r0, [pc, #76]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012ca:	f001 fdf5 	bl	8002eb8 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d4:	f7ff fe1e 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_TIM2_Init+0x94>)
 80012e6:	f001 ff97 	bl	8003218 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f0:	f7ff fe10 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_TIM2_Init+0x94>)
 8001302:	f002 f9bf 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800130c:	f7ff fe02 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000144 	.word	0x20000144

0800131c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800133a:	4a1e      	ldr	r2, [pc, #120]	@ (80013b4 <MX_TIM4_Init+0x98>)
 800133c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001340:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001344:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800134e:	2209      	movs	r2, #9
 8001350:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001360:	f001 fdaa 	bl	8002eb8 <HAL_TIM_Base_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800136a:	f7ff fdd3 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_TIM4_Init+0x94>)
 800137c:	f001 ff4c 	bl	8003218 <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001386:	f7ff fdc5 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <MX_TIM4_Init+0x94>)
 8001398:	f002 f974 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013a2:	f7ff fdb7 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000018c 	.word	0x2000018c
 80013b4:	40000800 	.word	0x40000800

080013b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d116      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201c      	movs	r0, #28
 80013ec:	f000 fa3d 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f0:	201c      	movs	r0, #28
 80013f2:	f000 fa56 	bl	80018a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013f6:	e01a      	b.n	800142e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_TIM_Base_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d115      	bne.n	800142e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_TIM_Base_MspInit+0x80>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201e      	movs	r0, #30
 8001424:	f000 fa21 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001428:	201e      	movs	r0, #30
 800142a:	f000 fa3a 	bl	80018a2 <HAL_NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40000800 	.word	0x40000800

08001440 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_USART1_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_USART1_UART_Init+0x4c>)
 8001478:	f002 f994 	bl	80037a4 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f7ff fd47 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200001d4 	.word	0x200001d4
 8001490:	40011000 	.word	0x40011000

08001494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001528 <HAL_UART_MspInit+0x94>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d134      	bne.n	8001520 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b1c      	ldr	r3, [pc, #112]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_UART_MspInit+0x98>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001500:	2307      	movs	r3, #7
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	@ (8001530 <HAL_UART_MspInit+0x9c>)
 800150c:	f000 fa76 	bl	80019fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2025      	movs	r0, #37	@ 0x25
 8001516:	f000 f9a8 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800151a:	2025      	movs	r0, #37	@ 0x25
 800151c:	f000 f9c1 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001538:	f7ff fe92 	bl	8001260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001562:	f003 f91d 	bl	80047a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fc27 	bl	8000db8 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800156c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001578:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 800157c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001580:	20000220 	.word	0x20000220

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f94f 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	200f      	movs	r0, #15
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fdda 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f967 	bl	80018be <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001608:	f000 f92f 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000008 	.word	0x20000008
 8001624:	20000010 	.word	0x20000010
 8001628:	2000000c 	.word	0x2000000c

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000010 	.word	0x20000010
 8001650:	2000021c 	.word	0x2000021c

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000021c 	.word	0x2000021c

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000010 	.word	0x20000010

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	@ (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	@ 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001834:	f7ff ff8e 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff29 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff3e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff8e 	bl	80017a8 <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5d 	bl	8001754 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff31 	bl	8001718 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff feb6 	bl	8001654 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d008      	beq.n	8001908 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e052      	b.n	80019ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0216 	bic.w	r2, r2, #22
 8001916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001926:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <HAL_DMA_Abort+0x62>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0208 	bic.w	r2, r2, #8
 8001946:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001958:	e013      	b.n	8001982 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195a:	f7ff fe7b 	bl	8001654 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b05      	cmp	r3, #5
 8001966:	d90c      	bls.n	8001982 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e015      	b.n	80019ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e4      	bne.n	800195a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001994:	223f      	movs	r2, #63	@ 0x3f
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2280      	movs	r2, #128	@ 0x80
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00c      	b.n	80019ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	e16b      	b.n	8001cf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 815a 	bne.w	8001cea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d005      	beq.n	8001a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d130      	bne.n	8001ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 0201 	and.w	r2, r3, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d017      	beq.n	8001aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d123      	bne.n	8001b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	220f      	movs	r2, #15
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	08da      	lsrs	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3208      	adds	r2, #8
 8001b3a:	69b9      	ldr	r1, [r7, #24]
 8001b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 80b4 	beq.w	8001cea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b60      	ldr	r3, [pc, #384]	@ (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b5d      	ldr	r3, [pc, #372]	@ (8001d08 <HAL_GPIO_Init+0x30c>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d0c <HAL_GPIO_Init+0x310>)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	@ (8001d10 <HAL_GPIO_Init+0x314>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x226>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	@ (8001d14 <HAL_GPIO_Init+0x318>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x222>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <HAL_GPIO_Init+0x31c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x21e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8001d1c <HAL_GPIO_Init+0x320>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x21a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d20 <HAL_GPIO_Init+0x324>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x216>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4d      	ldr	r2, [pc, #308]	@ (8001d24 <HAL_GPIO_Init+0x328>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x212>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4c      	ldr	r2, [pc, #304]	@ (8001d28 <HAL_GPIO_Init+0x32c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x20e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001d2c <HAL_GPIO_Init+0x330>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x20a>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00e      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e00c      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	e00a      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c0e:	2305      	movs	r3, #5
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x228>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4935      	ldr	r1, [pc, #212]	@ (8001d0c <HAL_GPIO_Init+0x310>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a32      	ldr	r2, [pc, #200]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a27      	ldr	r2, [pc, #156]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cba:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <HAL_GPIO_Init+0x334>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f ae90 	bls.w	8001a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	@ 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40021800 	.word	0x40021800
 8001d2c:	40021c00 	.word	0x40021c00
 8001d30:	40013c00 	.word	0x40013c00

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	041a      	lsls	r2, r3, #16
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	400b      	ands	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	619a      	str	r2, [r3, #24]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e12b      	b.n	8002006 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fd62 	bl	800088c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e00:	f000 fd40 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
 8001e04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a81      	ldr	r2, [pc, #516]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d807      	bhi.n	8001e20 <HAL_I2C_Init+0x84>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a80      	ldr	r2, [pc, #512]	@ (8002014 <HAL_I2C_Init+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bf94      	ite	ls
 8001e18:	2301      	movls	r3, #1
 8001e1a:	2300      	movhi	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e006      	b.n	8001e2e <HAL_I2C_Init+0x92>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4a7d      	ldr	r2, [pc, #500]	@ (8002018 <HAL_I2C_Init+0x27c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0e7      	b.n	8002006 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a78      	ldr	r2, [pc, #480]	@ (800201c <HAL_I2C_Init+0x280>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9b      	lsrs	r3, r3, #18
 8001e40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a6a      	ldr	r2, [pc, #424]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d802      	bhi.n	8001e70 <HAL_I2C_Init+0xd4>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	e009      	b.n	8001e84 <HAL_I2C_Init+0xe8>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a69      	ldr	r2, [pc, #420]	@ (8002020 <HAL_I2C_Init+0x284>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	099b      	lsrs	r3, r3, #6
 8001e82:	3301      	adds	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	495c      	ldr	r1, [pc, #368]	@ (8002010 <HAL_I2C_Init+0x274>)
 8001ea0:	428b      	cmp	r3, r1
 8001ea2:	d819      	bhi.n	8001ed8 <HAL_I2C_Init+0x13c>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e59      	subs	r1, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	1c59      	adds	r1, r3, #1
 8001eb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eb8:	400b      	ands	r3, r1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_I2C_Init+0x138>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e59      	subs	r1, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed2:	e051      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	e04f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_I2C_Init+0x168>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e58      	subs	r0, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_I2C_Init+0x18e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	0099      	lsls	r1, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Init+0x196>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e022      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10e      	bne.n	8001f58 <HAL_I2C_Init+0x1bc>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e58      	subs	r0, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f56:	e00f      	b.n	8001f78 <HAL_I2C_Init+0x1dc>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	6809      	ldr	r1, [r1, #0]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6911      	ldr	r1, [r2, #16]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	000186a0 	.word	0x000186a0
 8002014:	001e847f 	.word	0x001e847f
 8002018:	003d08ff 	.word	0x003d08ff
 800201c:	431bde83 	.word	0x431bde83
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e267      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d075      	beq.n	800212e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002042:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b04      	cmp	r3, #4
 800204c:	d00c      	beq.n	8002068 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204e:	4b85      	ldr	r3, [pc, #532]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002056:	2b08      	cmp	r3, #8
 8002058:	d112      	bne.n	8002080 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002062:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002066:	d10b      	bne.n	8002080 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	4b7e      	ldr	r3, [pc, #504]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d05b      	beq.n	800212c <HAL_RCC_OscConfig+0x108>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d157      	bne.n	800212c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e242      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x74>
 800208a:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a75      	ldr	r2, [pc, #468]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e01d      	b.n	80020d4 <HAL_RCC_OscConfig+0xb0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x98>
 80020a2:	4b70      	ldr	r3, [pc, #448]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0xb0>
 80020bc:	4b69      	ldr	r3, [pc, #420]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a68      	ldr	r2, [pc, #416]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b66      	ldr	r3, [pc, #408]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a65      	ldr	r2, [pc, #404]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff faba 	bl	8001654 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fab6 	bl	8001654 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e207      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0xc0>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff faa6 	bl	8001654 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff faa2 	bl	8001654 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1f3      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	4b51      	ldr	r3, [pc, #324]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0xe8>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d063      	beq.n	8002202 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800213a:	4b4a      	ldr	r3, [pc, #296]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800214e:	2b08      	cmp	r3, #8
 8002150:	d11c      	bne.n	800218c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002152:	4b44      	ldr	r3, [pc, #272]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215e:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x152>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e1c7      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4937      	ldr	r1, [pc, #220]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	e03a      	b.n	8002202 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002194:	4b34      	ldr	r3, [pc, #208]	@ (8002268 <HAL_RCC_OscConfig+0x244>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff fa5b 	bl	8001654 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7ff fa57 	bl	8001654 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1a8      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4925      	ldr	r1, [pc, #148]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
 80021d4:	e015      	b.n	8002202 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d6:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_RCC_OscConfig+0x244>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff fa3a 	bl	8001654 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7ff fa36 	bl	8001654 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e187      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d036      	beq.n	800227c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002216:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_RCC_OscConfig+0x248>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff fa1a 	bl	8001654 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff fa16 	bl	8001654 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e167      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_OscConfig+0x240>)
 8002238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x200>
 8002242:	e01b      	b.n	800227c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <HAL_RCC_OscConfig+0x248>)
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7ff fa03 	bl	8001654 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	e00e      	b.n	8002270 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002252:	f7ff f9ff 	bl	8001654 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d907      	bls.n	8002270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e150      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
 8002264:	40023800 	.word	0x40023800
 8002268:	42470000 	.word	0x42470000
 800226c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b88      	ldr	r3, [pc, #544]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ea      	bne.n	8002252 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8097 	beq.w	80023b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b81      	ldr	r3, [pc, #516]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b7d      	ldr	r3, [pc, #500]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b77      	ldr	r3, [pc, #476]	@ (8002498 <HAL_RCC_OscConfig+0x474>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d118      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b74      	ldr	r3, [pc, #464]	@ (8002498 <HAL_RCC_OscConfig+0x474>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a73      	ldr	r2, [pc, #460]	@ (8002498 <HAL_RCC_OscConfig+0x474>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f9bf 	bl	8001654 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7ff f9bb 	bl	8001654 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e10c      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <HAL_RCC_OscConfig+0x474>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x2ea>
 8002300:	4b64      	ldr	r3, [pc, #400]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a63      	ldr	r2, [pc, #396]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	e01c      	b.n	8002348 <HAL_RCC_OscConfig+0x324>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b05      	cmp	r3, #5
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x30c>
 8002316:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a5e      	ldr	r2, [pc, #376]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
 8002322:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002326:	4a5b      	ldr	r2, [pc, #364]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	@ 0x70
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0x324>
 8002330:	4b58      	ldr	r3, [pc, #352]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a57      	ldr	r2, [pc, #348]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
 800233c:	4b55      	ldr	r3, [pc, #340]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002340:	4a54      	ldr	r2, [pc, #336]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff f980 	bl	8001654 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	e00a      	b.n	800236e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002358:	f7ff f97c 	bl	8001654 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e0cb      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236e:	4b49      	ldr	r3, [pc, #292]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0ee      	beq.n	8002358 <HAL_RCC_OscConfig+0x334>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff f96a 	bl	8001654 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff f966 	bl	8001654 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0b5      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239a:	4b3e      	ldr	r3, [pc, #248]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ee      	bne.n	8002384 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a1 	beq.w	8002504 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c2:	4b34      	ldr	r3, [pc, #208]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d05c      	beq.n	8002488 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d141      	bne.n	800245a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b31      	ldr	r3, [pc, #196]	@ (800249c <HAL_RCC_OscConfig+0x478>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff f93a 	bl	8001654 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7ff f936 	bl	8001654 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e087      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	491b      	ldr	r1, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCC_OscConfig+0x478>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff f90f 	bl	8001654 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff f90b 	bl	8001654 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e05c      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x416>
 8002458:	e054      	b.n	8002504 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b10      	ldr	r3, [pc, #64]	@ (800249c <HAL_RCC_OscConfig+0x478>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff f8f8 	bl	8001654 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7ff f8f4 	bl	8001654 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e045      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_RCC_OscConfig+0x470>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x444>
 8002486:	e03d      	b.n	8002504 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e038      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000
 800249c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_RCC_OscConfig+0x4ec>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d028      	beq.n	8002500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d121      	bne.n	8002500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d11a      	bne.n	8002500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024d0:	4013      	ands	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d8:	4293      	cmp	r3, r2
 80024da:	d111      	bne.n	8002500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0cc      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b68      	ldr	r3, [pc, #416]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d90c      	bls.n	8002550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b65      	ldr	r3, [pc, #404]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002572:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a52      	ldr	r2, [pc, #328]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800258a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d044      	beq.n	8002634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d119      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b3f      	ldr	r3, [pc, #252]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e06f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b3b      	ldr	r3, [pc, #236]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e067      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b37      	ldr	r3, [pc, #220]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4934      	ldr	r1, [pc, #208]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002604:	f7ff f826 	bl	8001654 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7ff f822 	bl	8001654 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e04f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d20c      	bcs.n	800265c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe ff86 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023c00 	.word	0x40023c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	08004800 	.word	0x08004800
 80026d8:	20000008 	.word	0x20000008
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e4:	b090      	sub	sp, #64	@ 0x40
 80026e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f8:	4b59      	ldr	r3, [pc, #356]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d00d      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 8002704:	2b08      	cmp	r3, #8
 8002706:	f200 80a1 	bhi.w	800284c <HAL_RCC_GetSysClockFreq+0x16c>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x34>
 800270e:	2b04      	cmp	r3, #4
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x3a>
 8002712:	e09b      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x184>)
 8002716:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002718:	e09b      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271a:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x188>)
 800271c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800271e:	e098      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002720:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002728:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272a:	4b4d      	ldr	r3, [pc, #308]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d028      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	2200      	movs	r2, #0
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	627a      	str	r2, [r7, #36]	@ 0x24
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002748:	2100      	movs	r1, #0
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x188>)
 800274c:	fb03 f201 	mul.w	r2, r3, r1
 8002750:	2300      	movs	r3, #0
 8002752:	fb00 f303 	mul.w	r3, r0, r3
 8002756:	4413      	add	r3, r2
 8002758:	4a43      	ldr	r2, [pc, #268]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x188>)
 800275a:	fba0 1202 	umull	r1, r2, r0, r2
 800275e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002760:	460a      	mov	r2, r1
 8002762:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002766:	4413      	add	r3, r2
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	2200      	movs	r2, #0
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	61fa      	str	r2, [r7, #28]
 8002772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002776:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800277a:	f7fd fd25 	bl	80001c8 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4613      	mov	r3, r2
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002786:	e053      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002788:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	2200      	movs	r2, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	617a      	str	r2, [r7, #20]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800279a:	f04f 0b00 	mov.w	fp, #0
 800279e:	4652      	mov	r2, sl
 80027a0:	465b      	mov	r3, fp
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	ebb2 080a 	subs.w	r8, r2, sl
 80027ba:	eb63 090b 	sbc.w	r9, r3, fp
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027d2:	ebb2 0408 	subs.w	r4, r2, r8
 80027d6:	eb63 0509 	sbc.w	r5, r3, r9
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	00eb      	lsls	r3, r5, #3
 80027e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e8:	00e2      	lsls	r2, r4, #3
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	eb14 030a 	adds.w	r3, r4, sl
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	eb45 030b 	adc.w	r3, r5, fp
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002806:	4629      	mov	r1, r5
 8002808:	028b      	lsls	r3, r1, #10
 800280a:	4621      	mov	r1, r4
 800280c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002810:	4621      	mov	r1, r4
 8002812:	028a      	lsls	r2, r1, #10
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281a:	2200      	movs	r2, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	60fa      	str	r2, [r7, #12]
 8002820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002824:	f7fd fcd0 	bl	80001c8 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x180>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002840:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x184>)
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002854:	4618      	mov	r0, r3
 8002856:	3740      	adds	r7, #64	@ 0x40
 8002858:	46bd      	mov	sp, r7
 800285a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	00f42400 	.word	0x00f42400
 8002868:	017d7840 	.word	0x017d7840

0800286c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b03      	ldr	r3, [pc, #12]	@ (8002880 <HAL_RCC_GetHCLKFreq+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002888:	f7ff fff0 	bl	800286c <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08004810 	.word	0x08004810

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b0:	f7ff ffdc 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0b5b      	lsrs	r3, r3, #13
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	@ (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08004810 	.word	0x08004810

080028d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07b      	b.n	80029de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d108      	bne.n	8002900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f6:	d009      	beq.n	800290c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
 80028fe:	e005      	b.n	800290c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fbdc 	bl	80010e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002942:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002990:	ea42 0103 	orr.w	r1, r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0104 	and.w	r1, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	f003 0210 	and.w	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b088      	sub	sp, #32
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f6:	f7fe fe2d 	bl	8001654 <HAL_GetTick>
 80029fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d001      	beq.n	8002a10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e12a      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_Transmit+0x36>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e122      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_Transmit+0x48>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e11b      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	88fa      	ldrh	r2, [r7, #6]
 8002a54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a7c:	d10f      	bne.n	8002a9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa8:	2b40      	cmp	r3, #64	@ 0x40
 8002aaa:	d007      	beq.n	8002abc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ac4:	d152      	bne.n	8002b6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_Transmit+0xee>
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d145      	bne.n	8002b60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002af8:	e032      	b.n	8002b60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d112      	bne.n	8002b2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	881a      	ldrh	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b2c:	e018      	b.n	8002b60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b2e:	f7fe fd91 	bl	8001654 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d803      	bhi.n	8002b46 <HAL_SPI_Transmit+0x160>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b44:	d102      	bne.n	8002b4c <HAL_SPI_Transmit+0x166>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e082      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1c7      	bne.n	8002afa <HAL_SPI_Transmit+0x114>
 8002b6a:	e053      	b.n	8002c14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Transmit+0x194>
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d147      	bne.n	8002c0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ba0:	e033      	b.n	8002c0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d113      	bne.n	8002bd8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bd6:	e018      	b.n	8002c0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd8:	f7fe fd3c 	bl	8001654 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d803      	bhi.n	8002bf0 <HAL_SPI_Transmit+0x20a>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bee:	d102      	bne.n	8002bf6 <HAL_SPI_Transmit+0x210>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e02d      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1c6      	bne.n	8002ba2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f8b1 	bl	8002d80 <SPI_EndRxTxTransaction>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c80:	f7fe fce8 	bl	8001654 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c90:	f7fe fce0 	bl	8001654 <HAL_GetTick>
 8002c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c96:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	015b      	lsls	r3, r3, #5
 8002c9c:	0d1b      	lsrs	r3, r3, #20
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ca6:	e054      	b.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cae:	d050      	beq.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cb0:	f7fe fcd0 	bl	8001654 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13d      	bne.n	8002d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cde:	d111      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ce8:	d004      	beq.n	8002cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf2:	d107      	bne.n	8002d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d0c:	d10f      	bne.n	8002d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e017      	b.n	8002d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d19b      	bne.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000008 	.word	0x20000008

08002d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2201      	movs	r2, #1
 8002d94:	2102      	movs	r1, #2
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f7ff ff6a 	bl	8002c70 <SPI_WaitFlagStateUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e032      	b.n	8002e18 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002db2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <SPI_EndRxTxTransaction+0xa0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <SPI_EndRxTxTransaction+0xa4>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	0d5b      	lsrs	r3, r3, #21
 8002dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd0:	d112      	bne.n	8002df8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff ff47 	bl	8002c70 <SPI_WaitFlagStateUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e00f      	b.n	8002e18 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d0f2      	beq.n	8002df8 <SPI_EndRxTxTransaction+0x78>
 8002e12:	e000      	b.n	8002e16 <SPI_EndRxTxTransaction+0x96>
        break;
 8002e14:	bf00      	nop
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000008 	.word	0x20000008
 8002e24:	165e9f81 	.word	0x165e9f81

08002e28 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e038      	b.n	8002eb0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f7fd fc02 	bl	800065c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f001 fbbc 	bl	80045e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	461a      	mov	r2, r3
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	f001 fc1e 	bl	80046b4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6858      	ldr	r0, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	f001 fc4b 	bl	8004720 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	f041 0101 	orr.w	r1, r1, #1
 8002ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e041      	b.n	8002f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe fa6a 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 fa7e 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e04e      	b.n	800300e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	@ (800301c <HAL_TIM_Base_Start_IT+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800302c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	@ (8003030 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x80>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	@ (8003034 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e007      	b.n	800300c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40014000 	.word	0x40014000
 8003034:	40001800 	.word	0x40001800

08003038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d020      	beq.n	800309c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0202 	mvn.w	r2, #2
 800306c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f999 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f98b 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f99c 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d020      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0204 	mvn.w	r2, #4
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f973 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f965 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f976 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0208 	mvn.w	r2, #8
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2204      	movs	r2, #4
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f94d 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f93f 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f950 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01b      	beq.n	8003180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0210 	mvn.w	r2, #16
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2208      	movs	r2, #8
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f927 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f919 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f92a 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0201 	mvn.w	r2, #1
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd ff2a 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fae4 	bl	8003790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8fb 	bl	80033e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0220 	mvn.w	r2, #32
 8003208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fab6 	bl	800377c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_TIM_ConfigClockSource+0x1c>
 8003230:	2302      	movs	r3, #2
 8003232:	e0b4      	b.n	800339e <HAL_TIM_ConfigClockSource+0x186>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800325a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800326c:	d03e      	beq.n	80032ec <HAL_TIM_ConfigClockSource+0xd4>
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003272:	f200 8087 	bhi.w	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800327a:	f000 8086 	beq.w	800338a <HAL_TIM_ConfigClockSource+0x172>
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003282:	d87f      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b70      	cmp	r3, #112	@ 0x70
 8003286:	d01a      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xa6>
 8003288:	2b70      	cmp	r3, #112	@ 0x70
 800328a:	d87b      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b60      	cmp	r3, #96	@ 0x60
 800328e:	d050      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x11a>
 8003290:	2b60      	cmp	r3, #96	@ 0x60
 8003292:	d877      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b50      	cmp	r3, #80	@ 0x50
 8003296:	d03c      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0xfa>
 8003298:	2b50      	cmp	r3, #80	@ 0x50
 800329a:	d873      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d058      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x13a>
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d86f      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b30      	cmp	r3, #48	@ 0x30
 80032a6:	d064      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b30      	cmp	r3, #48	@ 0x30
 80032aa:	d86b      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d060      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d867      	bhi.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d05c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d05a      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x15a>
 80032bc:	e062      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ce:	f000 f9b9 	bl	8003644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	609a      	str	r2, [r3, #8]
      break;
 80032ea:	e04f      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032fc:	f000 f9a2 	bl	8003644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800330e:	609a      	str	r2, [r3, #8]
      break;
 8003310:	e03c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	461a      	mov	r2, r3
 8003320:	f000 f916 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2150      	movs	r1, #80	@ 0x50
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f96f 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 8003330:	e02c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 f935 	bl	80035ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2160      	movs	r1, #96	@ 0x60
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f95f 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 8003350:	e01c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800335e:	461a      	mov	r2, r3
 8003360:	f000 f8f6 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2140      	movs	r1, #64	@ 0x40
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f94f 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 8003370:	e00c      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f000 f946 	bl	800360e <TIM_ITRx_SetConfig>
      break;
 8003382:	e003      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      break;
 8003388:	e000      	b.n	800338c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800338a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a46      	ldr	r2, [pc, #280]	@ (8003524 <TIM_Base_SetConfig+0x12c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a43      	ldr	r2, [pc, #268]	@ (8003528 <TIM_Base_SetConfig+0x130>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a42      	ldr	r2, [pc, #264]	@ (800352c <TIM_Base_SetConfig+0x134>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a41      	ldr	r2, [pc, #260]	@ (8003530 <TIM_Base_SetConfig+0x138>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a40      	ldr	r2, [pc, #256]	@ (8003534 <TIM_Base_SetConfig+0x13c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a35      	ldr	r2, [pc, #212]	@ (8003524 <TIM_Base_SetConfig+0x12c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d027      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a32      	ldr	r2, [pc, #200]	@ (8003528 <TIM_Base_SetConfig+0x130>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d023      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a31      	ldr	r2, [pc, #196]	@ (800352c <TIM_Base_SetConfig+0x134>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a30      	ldr	r2, [pc, #192]	@ (8003530 <TIM_Base_SetConfig+0x138>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2f      	ldr	r2, [pc, #188]	@ (8003534 <TIM_Base_SetConfig+0x13c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2e      	ldr	r2, [pc, #184]	@ (8003538 <TIM_Base_SetConfig+0x140>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2d      	ldr	r2, [pc, #180]	@ (800353c <TIM_Base_SetConfig+0x144>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2c      	ldr	r2, [pc, #176]	@ (8003540 <TIM_Base_SetConfig+0x148>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2b      	ldr	r2, [pc, #172]	@ (8003544 <TIM_Base_SetConfig+0x14c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2a      	ldr	r2, [pc, #168]	@ (8003548 <TIM_Base_SetConfig+0x150>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a29      	ldr	r2, [pc, #164]	@ (800354c <TIM_Base_SetConfig+0x154>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	@ (8003524 <TIM_Base_SetConfig+0x12c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	@ (8003534 <TIM_Base_SetConfig+0x13c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d103      	bne.n	80034f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d105      	bne.n	8003516 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	611a      	str	r2, [r3, #16]
  }
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40010000 	.word	0x40010000
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40010400 	.word	0x40010400
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800
 8003544:	40001800 	.word	0x40001800
 8003548:	40001c00 	.word	0x40001c00
 800354c:	40002000 	.word	0x40002000

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0201 	bic.w	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800357a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f023 030a 	bic.w	r3, r3, #10
 800358c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 0210 	bic.w	r2, r3, #16
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	f043 0307 	orr.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800365e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e05a      	b.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e8:	d01d      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1a      	ldr	r2, [pc, #104]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10c      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4313      	orrs	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e042      	b.n	800383c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fe62 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fc85 	bl	80040f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800381c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b0ba      	sub	sp, #232	@ 0xe8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_UART_IRQHandler+0x66>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fb69 	bl	8003f7a <UART_Receive_IT>
      return;
 80038a8:	e25b      	b.n	8003d62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80de 	beq.w	8003a70 <HAL_UART_IRQHandler+0x22c>
 80038b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80d1 	beq.w	8003a70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_UART_IRQHandler+0xae>
 80038da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_UART_IRQHandler+0xd2>
 80038fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f043 0202 	orr.w	r2, r3, #2
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_UART_IRQHandler+0xf6>
 8003922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f043 0204 	orr.w	r2, r3, #4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800393a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d011      	beq.n	800396a <HAL_UART_IRQHandler+0x126>
 8003946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f043 0208 	orr.w	r2, r3, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 81f2 	beq.w	8003d58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_UART_IRQHandler+0x14e>
 8003980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 faf4 	bl	8003f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_UART_IRQHandler+0x17a>
 80039b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d04f      	beq.n	8003a5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f9fc 	bl	8003dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ce:	2b40      	cmp	r3, #64	@ 0x40
 80039d0:	d141      	bne.n	8003a56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3314      	adds	r3, #20
 80039d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1d9      	bne.n	80039d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d013      	beq.n	8003a4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c24 <HAL_UART_IRQHandler+0x3e0>)
 8003a2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd ffbf 	bl	80019b6 <HAL_DMA_Abort_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d016      	beq.n	8003a6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	e00e      	b.n	8003a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f99e 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a54:	e00a      	b.n	8003a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f99a 	bl	8003d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	e006      	b.n	8003a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f996 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a6a:	e175      	b.n	8003d58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	bf00      	nop
    return;
 8003a6e:	e173      	b.n	8003d58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 814f 	bne.w	8003d18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8148 	beq.w	8003d18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8141 	beq.w	8003d18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	f040 80b6 	bne.w	8003c28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8145 	beq.w	8003d5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ada:	429a      	cmp	r2, r3
 8003adc:	f080 813e 	bcs.w	8003d5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ae6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af2:	f000 8088 	beq.w	8003c06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1d9      	bne.n	8003af6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3314      	adds	r3, #20
 8003b48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e1      	bne.n	8003b42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e3      	bne.n	8003b7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd6:	f023 0310 	bic.w	r3, r3, #16
 8003bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003be8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e3      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd fe68 	bl	80018d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8c1 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c22:	e09b      	b.n	8003d5c <HAL_UART_IRQHandler+0x518>
 8003c24:	08003e83 	.word	0x08003e83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 808e 	beq.w	8003d60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8089 	beq.w	8003d60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e3      	bne.n	8003c4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3314      	adds	r3, #20
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	623b      	str	r3, [r7, #32]
   return(result);
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003caa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e3      	bne.n	8003c86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cf0:	61fa      	str	r2, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e3      	bne.n	8003ccc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f847 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d16:	e023      	b.n	8003d60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_UART_IRQHandler+0x4f4>
 8003d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f8ba 	bl	8003eaa <UART_Transmit_IT>
    return;
 8003d36:	e014      	b.n	8003d62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00e      	beq.n	8003d62 <HAL_UART_IRQHandler+0x51e>
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f8fa 	bl	8003f4a <UART_EndTransmit_IT>
    return;
 8003d56:	e004      	b.n	8003d62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d60:	bf00      	nop
  }
}
 8003d62:	37e8      	adds	r7, #232	@ 0xe8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b095      	sub	sp, #84	@ 0x54
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3314      	adds	r3, #20
 8003dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0310 	bic.w	r3, r3, #16
 8003e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e54:	61ba      	str	r2, [r7, #24]
 8003e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6979      	ldr	r1, [r7, #20]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	613b      	str	r3, [r7, #16]
   return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e76:	bf00      	nop
 8003e78:	3754      	adds	r7, #84	@ 0x54
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff ff77 	bl	8003d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b21      	cmp	r3, #33	@ 0x21
 8003ebc:	d13e      	bne.n	8003f3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec6:	d114      	bne.n	8003ef2 <UART_Transmit_IT+0x48>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d110      	bne.n	8003ef2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	621a      	str	r2, [r3, #32]
 8003ef0:	e008      	b.n	8003f04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	1c59      	adds	r1, r3, #1
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6211      	str	r1, [r2, #32]
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fefc 	bl	8003d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b08c      	sub	sp, #48	@ 0x30
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b22      	cmp	r3, #34	@ 0x22
 8003f8c:	f040 80ae 	bne.w	80040ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d117      	bne.n	8003fca <UART_Receive_IT+0x50>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d113      	bne.n	8003fca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc8:	e026      	b.n	8004018 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fdc:	d007      	beq.n	8003fee <UART_Receive_IT+0x74>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <UART_Receive_IT+0x82>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e008      	b.n	800400e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004008:	b2da      	uxtb	r2, r3
 800400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4619      	mov	r1, r3
 8004026:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004028:	2b00      	cmp	r3, #0
 800402a:	d15d      	bne.n	80040e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0220 	bic.w	r2, r2, #32
 800403a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800404a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	2b01      	cmp	r3, #1
 8004070:	d135      	bne.n	80040de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	613b      	str	r3, [r7, #16]
   return(result);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004098:	623a      	str	r2, [r7, #32]
 800409a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	6a3a      	ldr	r2, [r7, #32]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d10a      	bne.n	80040d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fe64 	bl	8003da4 <HAL_UARTEx_RxEventCallback>
 80040dc:	e002      	b.n	80040e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe4c 	bl	8003d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e002      	b.n	80040ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e000      	b.n	80040ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3730      	adds	r7, #48	@ 0x30
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0c0      	sub	sp, #256	@ 0x100
 80040fe:	af00      	add	r7, sp, #0
 8004100:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	ea40 0301 	orr.w	r3, r0, r1
 8004120:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004150:	f021 010c 	bic.w	r1, r1, #12
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800415e:	430b      	orrs	r3, r1
 8004160:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	6999      	ldr	r1, [r3, #24]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	ea40 0301 	orr.w	r3, r0, r1
 800417e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b8f      	ldr	r3, [pc, #572]	@ (80043c4 <UART_SetConfig+0x2cc>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <UART_SetConfig+0xa0>
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8d      	ldr	r3, [pc, #564]	@ (80043c8 <UART_SetConfig+0x2d0>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fb88 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 800419c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041a0:	e003      	b.n	80041aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041a2:	f7fe fb6f 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
 80041a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041b4:	f040 810c 	bne.w	80043d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041d2:	415b      	adcs	r3, r3
 80041d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80041da:	4621      	mov	r1, r4
 80041dc:	eb12 0801 	adds.w	r8, r2, r1
 80041e0:	4629      	mov	r1, r5
 80041e2:	eb43 0901 	adc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004208:	462b      	mov	r3, r5
 800420a:	eb49 0303 	adc.w	r3, r9, r3
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800421e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004226:	460b      	mov	r3, r1
 8004228:	18db      	adds	r3, r3, r3
 800422a:	653b      	str	r3, [r7, #80]	@ 0x50
 800422c:	4613      	mov	r3, r2
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
 8004234:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004238:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800423c:	f7fb ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <UART_SetConfig+0x2d4>)
 8004246:	fba3 2302 	umull	r2, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	011c      	lsls	r4, r3, #4
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004258:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800425c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004268:	415b      	adcs	r3, r3
 800426a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800426c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004270:	4641      	mov	r1, r8
 8004272:	eb12 0a01 	adds.w	sl, r2, r1
 8004276:	4649      	mov	r1, r9
 8004278:	eb43 0b01 	adc.w	fp, r3, r1
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800428c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004290:	4692      	mov	sl, r2
 8004292:	469b      	mov	fp, r3
 8004294:	4643      	mov	r3, r8
 8004296:	eb1a 0303 	adds.w	r3, sl, r3
 800429a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800429e:	464b      	mov	r3, r9
 80042a0:	eb4b 0303 	adc.w	r3, fp, r3
 80042a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042bc:	460b      	mov	r3, r1
 80042be:	18db      	adds	r3, r3, r3
 80042c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c2:	4613      	mov	r3, r2
 80042c4:	eb42 0303 	adc.w	r3, r2, r3
 80042c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042d2:	f7fb ff79 	bl	80001c8 <__aeabi_uldivmod>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	4b3b      	ldr	r3, [pc, #236]	@ (80043cc <UART_SetConfig+0x2d4>)
 80042de:	fba3 2301 	umull	r2, r3, r3, r1
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2264      	movs	r2, #100	@ 0x64
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042f2:	4b36      	ldr	r3, [pc, #216]	@ (80043cc <UART_SetConfig+0x2d4>)
 80042f4:	fba3 2302 	umull	r2, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800430c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004310:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004324:	4641      	mov	r1, r8
 8004326:	1851      	adds	r1, r2, r1
 8004328:	6339      	str	r1, [r7, #48]	@ 0x30
 800432a:	4649      	mov	r1, r9
 800432c:	414b      	adcs	r3, r1
 800432e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800433c:	4659      	mov	r1, fp
 800433e:	00cb      	lsls	r3, r1, #3
 8004340:	4651      	mov	r1, sl
 8004342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004346:	4651      	mov	r1, sl
 8004348:	00ca      	lsls	r2, r1, #3
 800434a:	4610      	mov	r0, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4603      	mov	r3, r0
 8004350:	4642      	mov	r2, r8
 8004352:	189b      	adds	r3, r3, r2
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004358:	464b      	mov	r3, r9
 800435a:	460a      	mov	r2, r1
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004370:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004378:	460b      	mov	r3, r1
 800437a:	18db      	adds	r3, r3, r3
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800437e:	4613      	mov	r3, r2
 8004380:	eb42 0303 	adc.w	r3, r2, r3
 8004384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800438a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800438e:	f7fb ff1b 	bl	80001c8 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <UART_SetConfig+0x2d4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	@ 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	@ 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <UART_SetConfig+0x2d4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c0:	e106      	b.n	80045d0 <UART_SetConfig+0x4d8>
 80043c2:	bf00      	nop
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80043de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043e2:	4642      	mov	r2, r8
 80043e4:	464b      	mov	r3, r9
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	6239      	str	r1, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	4641      	mov	r1, r8
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	4649      	mov	r1, r9
 80043f8:	eb43 0501 	adc.w	r5, r3, r1
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004418:	464b      	mov	r3, r9
 800441a:	eb45 0303 	adc.w	r3, r5, r3
 800441e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800442e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800443e:	4629      	mov	r1, r5
 8004440:	008b      	lsls	r3, r1, #2
 8004442:	4621      	mov	r1, r4
 8004444:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004448:	4621      	mov	r1, r4
 800444a:	008a      	lsls	r2, r1, #2
 800444c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004450:	f7fb feba 	bl	80001c8 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b60      	ldr	r3, [pc, #384]	@ (80045dc <UART_SetConfig+0x4e4>)
 800445a:	fba3 2302 	umull	r2, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	011c      	lsls	r4, r3, #4
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800446c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004470:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004474:	4642      	mov	r2, r8
 8004476:	464b      	mov	r3, r9
 8004478:	1891      	adds	r1, r2, r2
 800447a:	61b9      	str	r1, [r7, #24]
 800447c:	415b      	adcs	r3, r3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004484:	4641      	mov	r1, r8
 8004486:	1851      	adds	r1, r2, r1
 8004488:	6139      	str	r1, [r7, #16]
 800448a:	4649      	mov	r1, r9
 800448c:	414b      	adcs	r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	00cb      	lsls	r3, r1, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a6:	4651      	mov	r1, sl
 80044a8:	00ca      	lsls	r2, r1, #3
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	4603      	mov	r3, r0
 80044b0:	4642      	mov	r2, r8
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044b8:	464b      	mov	r3, r9
 80044ba:	460a      	mov	r2, r1
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ee:	f7fb fe6b 	bl	80001c8 <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	4b38      	ldr	r3, [pc, #224]	@ (80045dc <UART_SetConfig+0x4e4>)
 80044fa:	fba3 2301 	umull	r2, r3, r3, r1
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2264      	movs	r2, #100	@ 0x64
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1acb      	subs	r3, r1, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	@ 0x32
 800450c:	4a33      	ldr	r2, [pc, #204]	@ (80045dc <UART_SetConfig+0x4e4>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	673b      	str	r3, [r7, #112]	@ 0x70
 8004522:	677a      	str	r2, [r7, #116]	@ 0x74
 8004524:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	1891      	adds	r1, r2, r2
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	415b      	adcs	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004538:	4641      	mov	r1, r8
 800453a:	1851      	adds	r1, r2, r1
 800453c:	6039      	str	r1, [r7, #0]
 800453e:	4649      	mov	r1, r9
 8004540:	414b      	adcs	r3, r1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004550:	4659      	mov	r1, fp
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4651      	mov	r1, sl
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4651      	mov	r1, sl
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4642      	mov	r2, r8
 8004566:	189b      	adds	r3, r3, r2
 8004568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800456a:	464b      	mov	r3, r9
 800456c:	460a      	mov	r2, r1
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	663b      	str	r3, [r7, #96]	@ 0x60
 800457e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800458c:	4649      	mov	r1, r9
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4641      	mov	r1, r8
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800459e:	f7fb fe13 	bl	80001c8 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <UART_SetConfig+0x4e4>)
 80045a8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	2164      	movs	r1, #100	@ 0x64
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	3332      	adds	r3, #50	@ 0x32
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <UART_SetConfig+0x4e4>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4422      	add	r2, r4
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045dc:	51eb851f 	.word	0x51eb851f

080045e0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	f023 0101 	bic.w	r1, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b08      	cmp	r3, #8
 8004608:	d102      	bne.n	8004610 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800460a:	2340      	movs	r3, #64	@ 0x40
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e001      	b.n	8004614 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004620:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004626:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800462c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004632:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004638:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800463e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8004644:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800464a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8004650:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800466e:	4b10      	ldr	r3, [pc, #64]	@ (80046b0 <FSMC_NORSRAM_Init+0xd0>)
 8004670:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004678:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8004680:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	43db      	mvns	r3, r3
 8004690:	ea02 0103 	and.w	r1, r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4319      	orrs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	0008fb7f 	.word	0x0008fb7f

080046b4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ca:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	431a      	orrs	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	051b      	lsls	r3, r3, #20
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	3b02      	subs	r3, #2
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	3201      	adds	r2, #1
 8004708:	4319      	orrs	r1, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004734:	d11d      	bne.n	8004772 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800473e:	4b13      	ldr	r3, [pc, #76]	@ (800478c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004740:	4013      	ands	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	6852      	ldr	r2, [r2, #4]
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	4311      	orrs	r1, r2
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	6892      	ldr	r2, [r2, #8]
 8004752:	0212      	lsls	r2, r2, #8
 8004754:	4311      	orrs	r1, r2
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	6992      	ldr	r2, [r2, #24]
 800475a:	4311      	orrs	r1, r2
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	68d2      	ldr	r2, [r2, #12]
 8004760:	0412      	lsls	r2, r2, #16
 8004762:	430a      	orrs	r2, r1
 8004764:	ea43 0102 	orr.w	r1, r3, r2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004770:	e005      	b.n	800477e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800477a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	cff00000 	.word	0xcff00000

08004790 <memset>:
 8004790:	4402      	add	r2, r0
 8004792:	4603      	mov	r3, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	f803 1b01 	strb.w	r1, [r3], #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <__libc_init_array>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	4d0d      	ldr	r5, [pc, #52]	@ (80047d8 <__libc_init_array+0x38>)
 80047a4:	4c0d      	ldr	r4, [pc, #52]	@ (80047dc <__libc_init_array+0x3c>)
 80047a6:	1b64      	subs	r4, r4, r5
 80047a8:	10a4      	asrs	r4, r4, #2
 80047aa:	2600      	movs	r6, #0
 80047ac:	42a6      	cmp	r6, r4
 80047ae:	d109      	bne.n	80047c4 <__libc_init_array+0x24>
 80047b0:	4d0b      	ldr	r5, [pc, #44]	@ (80047e0 <__libc_init_array+0x40>)
 80047b2:	4c0c      	ldr	r4, [pc, #48]	@ (80047e4 <__libc_init_array+0x44>)
 80047b4:	f000 f818 	bl	80047e8 <_init>
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	2600      	movs	r6, #0
 80047be:	42a6      	cmp	r6, r4
 80047c0:	d105      	bne.n	80047ce <__libc_init_array+0x2e>
 80047c2:	bd70      	pop	{r4, r5, r6, pc}
 80047c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c8:	4798      	blx	r3
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7ee      	b.n	80047ac <__libc_init_array+0xc>
 80047ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d2:	4798      	blx	r3
 80047d4:	3601      	adds	r6, #1
 80047d6:	e7f2      	b.n	80047be <__libc_init_array+0x1e>
 80047d8:	08004820 	.word	0x08004820
 80047dc:	08004820 	.word	0x08004820
 80047e0:	08004820 	.word	0x08004820
 80047e4:	08004824 	.word	0x08004824

080047e8 <_init>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

080047f4 <_fini>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr
